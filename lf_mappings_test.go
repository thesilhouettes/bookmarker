package main

import (
	"fmt"
	"os"
	"path"
	"strings"
	"testing"

	. "github.com/franela/goblin"
	"github.com/spf13/afero"
)

const END_GENERATION_STRING = "### End of BOOKMARKER generation"
const START_GENERATION_STRING = "### Automatically generated by BOOKMARKER ###"

func TestLfMappings(t *testing.T) {
	var g = Goblin(t)

	AppFs = afero.NewMemMapFs()

	g.Describe("lf mappings generation works", func() {
		var homeDir, _ = os.UserHomeDir()
		var flags = Flags{
			homePath: homeDir,
			editor:   "vim",
		}

		g.Before(func() {

			AppFs.MkdirAll(path.Join(flags.homePath, ".config", "lf"), os.ModeDir)
		})

		g.BeforeEach(func() {
			AppFs.Remove(path.Join(flags.homePath, ".config", "lf", "lfrc"))
			AppFs.Create(path.Join(flags.homePath, ".config", "lf", "lfrc"))
		})

		g.It("ignore type file and only generate for dir", func() {
			var bookmarks = []Bookmark{
				{
					typ:          "file",
					path:         "weird/file.txt",
					abbreviation: "w",
				},
				{
					typ:          "dir",
					path:         "deeply/nested/path/works/fine",
					abbreviation: "k",
				},
				{
					typ:          "dir",
					path:         "/absolute/path/to/nowhere.ini",
					abbreviation: "a",
				},
			}
			var strs = []string{
				START_GENERATION_STRING + "\n",
				fmt.Sprintf("map gk cd %s/deeply/nested/path/works/fine", flags.homePath),
				"map ga cd /absolute/path/to/nowhere.ini",
				"\n" + END_GENERATION_STRING + "\n",
			}
			var want = strings.Join(strs, "\n")

			generateLfMappings(bookmarks, flags)

			var text, _, _ = readTextFromFile(path.Join(homeDir, ".config", "lf", "lfrc"))
			g.Assert(text).Equal(want)
		})

		g.It("append if the file already has something written", func() {
			var lfConfig, _ = AppFs.OpenFile(path.Join(flags.homePath, ".config", "lf", "lfrc"), os.O_WRONLY, os.ModeType)
			lfConfig.WriteString("set icons true\n")
			lfConfig.Close()
			var bookmarks = []Bookmark{
				{
					typ:          "file",
					path:         "weird/file.txt",
					abbreviation: "w",
				},
				{
					typ:          "dir",
					path:         "deeply/nested/path/works/fine",
					abbreviation: "k",
				},
				{
					typ:          "dir",
					path:         "/absolute/path/to/nowhere.ini",
					abbreviation: "a",
				},
			}
			var strs = []string{
				"set icons true",
				START_GENERATION_STRING + "\n",
				fmt.Sprintf("map gk cd %s/deeply/nested/path/works/fine", flags.homePath),
				"map ga cd /absolute/path/to/nowhere.ini",
				"\n" + END_GENERATION_STRING + "\n",
			}
			var want = strings.Join(strs, "\n")

			generateLfMappings(bookmarks, flags)

			var text, _, _ = readTextFromFile(path.Join(homeDir, ".config", "lf", "lfrc"))
			g.Assert(text).Equal(want)
		})

		g.It("replace the old generation", func() {
			var lfConfig, _ = AppFs.OpenFile(path.Join(flags.homePath, ".config", "lf", "lfrc"), os.O_WRONLY, os.ModeType)
			lfConfig.WriteString(fmt.Sprintf(
				"set icons true\n%s\n\n\n%s\nmore texts", START_GENERATION_STRING, END_GENERATION_STRING,
			))
			lfConfig.Close()
			var bookmarks = []Bookmark{
				{
					typ:          "dir",
					path:         "deeply/nested/path/works/fine",
					abbreviation: "k",
				},
				{
					typ:          "dir",
					path:         "/absolute/path/to/nowhere.ini",
					abbreviation: "a",
				},
			}
			var strs = []string{
				"set icons true",
				"more texts",
				START_GENERATION_STRING + "\n",
				fmt.Sprintf("map gk cd %s/deeply/nested/path/works/fine", flags.homePath),
				"map ga cd /absolute/path/to/nowhere.ini",
				"\n" + END_GENERATION_STRING + "\n",
			}
			var want = strings.Join(strs, "\n")

			generateLfMappings(bookmarks, flags)

			var text, _, _ = readTextFromFile(path.Join(homeDir, ".config", "lf", "lfrc"))
			g.Assert(text).Equal(want)
		})
	})
}
