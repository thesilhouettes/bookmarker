package main

import (
	"bufio"
	"fmt"
	"os"
	"path"

	log "github.com/sirupsen/logrus"
)

var generateLfMappings = func(bms []Bookmark, flags Flags) error {
	const END_GENERATION_STRING = "### End of BOOKMARKER generation"
	const START_GENERATION_STRING = "### Automatically generated by BOOKMARKER ###"
	var lfConfig, err = AppFs.OpenFile(path.Join(flags.homePath, ".config", "lf", "lfrc"), os.O_RDWR, os.ModeAppend)
	if err != nil {
		return err
	}
	defer lfConfig.Close()

	// generate the required strings first
	var lines = START_GENERATION_STRING + "\n\n"
	for _, bm := range bms {
		// we don't need to carry about paths which are not directories
		if bm.typ == "dir" {
			var line = fmt.Sprintf("map g%s cd %s\n", bm.abbreviation, resolve(bm.path, flags))
			log.Debugln(line)
			lines += line
		}
	}
	lines += "\n" + END_GENERATION_STRING + "\n"

	// remove the old section with new section
	var scanner = bufio.NewScanner(lfConfig)
	var success bool

	var keptLines = ""
	var insideGenerationSection = false

	// finds the lines which are enclosed by the two comments
	// and not include them
	for {
		success = scanner.Scan()
		if !success {
			err = scanner.Err()
			if err != nil {
				return err
			}
			break
		}
		var line = scanner.Text()

		// omit the lines and check if we are out of it
		if insideGenerationSection {
			if line == END_GENERATION_STRING {
				insideGenerationSection = false
			}
			continue
		}

		// trigger inside generation once the ### line is reached
		if line == START_GENERATION_STRING {
			insideGenerationSection = true
		} else {
			keptLines += line + "\n"
		}
	}

	var allLines = keptLines + lines

	// go back to the beginning and overwrite everything
	lfConfig.Seek(0, 0)

	var _, writeErr = lfConfig.WriteString(allLines)
	if writeErr != nil {
		return writeErr
	}
	return nil
}
